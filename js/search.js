let search={state:{searchDiv:null,lastSearchString:"",autocompleteInitialized:!1,lastSGServer:null,searchURL:null,last:null,timeoutID:null,selectedAutoCompleteItem:null},init:function(){try{search.render()}catch(err){application.errorHandling(err.message,0)}},render:function(){try{$("#searchPanelDiv").html(`
                    <table  class="w100 s9 tdPadding5"> 
                    <tr>
                        <td ><span class="s12b">${Lang.search.search}</span></td>
                        <td  align="right">
                        <span class="link s18" onclick="toolbox.closeAllTools('search',true)"><img src="images/icons/close.png"></span>
                    </td></tr>
                    <tr>
                        <td class="w100">
                            <input type="text" id="searchInputID" class="w100 inputautocomplete" value="" autocomplete="on" onkeyup="search.initAutoComplete();" placeholder="${Lang.search.searchPlaceholder}">
                        </td>
                        <td>
                            <button id="searchBtn" class="ButtonRoundOutline i18n " onclick="search.doSearch()"><img src="images/icons/searchSmall.png"></button>
                        </td>
                    </tr>
                    </table>
                    <div id="searchResultDiv" class="w100 h100" style="display:none">
                    </div> `)}catch(err){application.errorHandling(err.message,0)}},initAutoComplete:function(){try{search.fetchAutoComplete()}catch(err){application.errorHandling(err.message,0)}},fetchAutoComplete:function(){try{var searchString=$("#searchInputID").val();if(void 0!==searchString&&null!=searchString&&""!=searchString&&1!=search.searchLocation(searchString)){let SGServices;if(application.state.connectedServer)SGServices=application.state.connectedServer+"//SGServices.json";else{let projectPath=application.state.projectPath;var projectPathSplit=projectPath.split("/projects");projectPath=projectPathSplit[0],SGServices=projectPath+"//SGServices.json"}null==search.state.lastSGServer||search.state.lastSGServer!=application.state.connectedServer||null==search.state.searchURL?$.ajax({url:SGServices,success:function(data){data.AddressSearch&&(search.state.lastSGServer=application.state.connectedServer,search.state.searchURL=data.AddressSearch[0].Value+"callback=fillAutoComplete&q=",search.searchAddress())},error:function(msg){search.state.lastSGServer=null,search.state.searchURL=null,application.errorHandling(msg.statusText,2)}}):search.searchAddress()}}catch(err){application.errorHandling(err.message,0)}},doSearch:function(){var LLCS;search.state.selectedAutoCompleteItem?application.state.isPlanar?(LLCS=SGWorld.CoordServices.CreateCoordinateSystem('GEOGCS["WGS84 Coordinate System",DATUM["WGS 1984",SPHEROID["WGS 1984",6378137,298.257223563],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433],AUTHORITY["EPSG","4326"],AUTHORITY["SBMG","LAT-LONG,LAT-LONG,WGS84,METERS"]]'),LLCS=SGWorld.CoordServices.Reproject(LLCS,SGWorld.Terrain.CoordinateSystem,search.state.selectedAutoCompleteItem.coord.Lon,search.state.selectedAutoCompleteItem.coord.Lat),navigate.flyToCoord(LLCS.X,LLCS.Y)):navigate.flyToCoord(search.state.selectedAutoCompleteItem.coord.Lon,search.state.selectedAutoCompleteItem.coord.Lat):$.ajax({url:search.state.searchURL+encodeURIComponent(searchString),success:function(data){var LLCS,data=search.parseDataFromResponse(data);search.state.lastSearchString==$("#searchInputID").val()&&(application.state.isPlanar?(LLCS=SGWorld.CoordServices.CreateCoordinateSystem('GEOGCS["WGS84 Coordinate System",DATUM["WGS 1984",SPHEROID["WGS 1984",6378137,298.257223563],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433],AUTHORITY["EPSG","4326"],AUTHORITY["SBMG","LAT-LONG,LAT-LONG,WGS84,METERS"]]'),LLCS=SGWorld.CoordServices.Reproject(LLCS,SGWorld.Terrain.CoordinateSystem,data[0].coord.Lon,data[0].coord.Lat),navigate.flyToCoord(LLCS.X,LLCS.Y)):navigate.flyToCoord(data[0].coord.Lon,data[0].coord.Lat))},error:function(msg){application.errorHandling(msg.statusText,2)}})},searchAddress:function(){try{search.state.autocompleteInitialized||(search.state.autocompleteInitialized=!0,$("#searchInputID").autocomplete({source:function(request,response){search.state.lastSearchString=request.term;request=search.state.searchURL+encodeURIComponent(search.state.lastSearchString);$.ajax({url:request,success:function(data){data=search.parseDataFromResponse(data);response(data)},error:function(msg){application.errorHandling(msg.statusText,2),response()}})},classes:{"ui-autocomplete":"autocomplete","ui-autocomplete-input":"inputautocomplete"},select:function(event,ui){search.state.selectedAutoCompleteItem=ui.item,search.doSearch()}}).autocomplete("instance")._renderItem=function(ul,item){var prefix=search.longestCommonPrefix(item.label,search.state.lastSearchString);let splitArr,split;return splitArr=prefix?["",prefix,(split=item.label.split(prefix))[1]]:1==(split=1==(split=item.label.split(search.state.lastSearchString.charAt(0).toLowerCase()+search.state.lastSearchString.slice(1))).length?item.label.split(search.state.lastSearchString.charAt(0).toUpperCase()+search.state.lastSearchString.slice(1)):split).length?[item.label,"",""]:[split[0],search.state.lastSearchString,split[1]],$("<li>").append('<div class="autocompleteElement"><span>'+splitArr[0]+"<b>"+splitArr[1]+"</b>"+splitArr[2]+'</span><br><span class="autocompleteItemSmallFont">'+item.description+"</span></div>").appendTo(ul)})}catch(err){application.errorHandling(err.message,0)}},longestCommonPrefix:function(firstString,secondString){try{let i=0,commonPrefix="";for(;firstString.charAt(i).toLowerCase()===secondString.charAt(i).toLowerCase()&&i<firstString.length&&i<secondString.length;)commonPrefix+=firstString.charAt(i),i++;return commonPrefix}catch(err){application.errorHandling(err.message,0)}},parseDataFromResponse:function(data){let realData=data.split("fillAutoComplete(")[1];data=realData.lastIndexOf(")");return realData=realData.slice(0,data),realData=(realData=(realData=JSON.parse(realData)).slice(0,5)).map(element=>({label:""+element.Name,description:""+element.Description,coord:{Lon:element.Lon,Lat:element.Lat}}))},searchLocation:function(query,searchBox){let x=-1,y=-1;if(-1<(query=settings.state.isFrenchLanguage?services.invertDotsCommas(query):query).toLowerCase().indexOf("mgrs:")){if(""==(query=(-1<(query=query.replace(/ /g,"")).indexOf("MGRS:")?query.split("MGRS:"):query.split("mgrs:"))[1]))return!0;var coord=SGWorld.CoordServices.ConvertMGRSToCoordinate(query);x=coord.X,y=coord.Y}else if(-1<query.indexOf(",")){coord=query.split(",");if(x=!isNaN(coord[0])&&isFinite(coord[0])&&null!=coord[0].match(/[0-9]/g)?Number(coord[0]):null,y=!isNaN(coord[1])&&isFinite(coord[1])&&null!=coord[1].match(/[0-9]/g)?Number(coord[1]):null,2!=coord.length||null==x||null==y)return!1;application.state.isPlanar||(query=x,x=y,y=query)}return-1!=x&&-1!=y&&(navigate.flyToCoord(x,y),!0)},inputFromCord:function(MGRS){try{toolbox.selectTool(4,!0);let searchText="";var altitudeTypeRequest=0==settings.state.altitudeType?0:3,cameraPos=SGWorld.Navigate.GetPosition(altitudeTypeRequest);searchText=MGRS?"MGRS: "+SGWorld.CoordServices.ConvertCoordinateToMGRS(cameraPos.X,cameraPos.Y):application.state.isPlanar?cameraPos.X.toFixed(1)+" , "+cameraPos.Y.toFixed(1):cameraPos.Y.toFixed(5)+" , "+cameraPos.X.toFixed(5),$("#searchInputID").val(searchText),$("#searchInputID").focus()}catch(err){application.errorHandling(err.message,0)}},dummy:null};